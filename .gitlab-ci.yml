# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy

build-frontend-job:       # This job runs in the build stage, which runs first.
  stage: build
  image: node
  script:
    - echo "Compiling the React app..."
    - cd front/pi-grupo8
    - npm ci
    - npm run build
    - echo "Compile complete."
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "development"
      changes:
        - front/pi-grupo8/*/
  artifacts:
    paths:
        - front/pi-grupo8/build

deploy-frontend-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - echo "Web application deploying..."
    - aws s3 cp --recursive front/pi-grupo8/build s3://digitalbooking-grupo8
    - echo "Web application successfully deployed."
  rules:
    - if: $CI_COMMIT_BRANCH == "development"
      changes:
        - front/pi-grupo8/*/

build-backend-job:
  stage: build
  image: maven:latest
  script:
    - echo "Compiling the Spring boot app..."
    - mvn clean install
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "development"
      changes:
        - src/*/
  artifacts:
    paths:
      - target/digitalbooking.jar



deploy-backend-job:
  stage: deploy
  image: alpine:3.11
  before_script:
    - apk update && apk add openssh-client bash
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - touch ~/.ssh/config
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh-keyscan -H $DEPLOY_SERVER_IP >> ~/.ssh/known_hosts
  script:
    - ssh ec2-user@$DEPLOY_SERVER_IP "sudo systemctl stop digitalbooking.service"
    - scp target/digitalbooking.jar ec2-user@$DEPLOY_SERVER_IP:~/proyecto-integrador
    - echo "API loaded successfully"
    - ssh ec2-user@$DEPLOY_SERVER_IP "sudo systemctl start digitalbooking.service"
    - echo "API successfully deployed."
  rules:
    - if: $CI_COMMIT_BRANCH == "development"
      changes:
        - src/*/
  